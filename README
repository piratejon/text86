The goal is getting a USB key to boot up to a place where you can type text and it saves it to the USB key. I first thought of this as a fun way to get ready for NaNoWriMo and expected to use it throughout. I was inspired by Write or Die and wanted to create something of a "Write or Die OS", well, that did not happen and what remains has only in common with Write or Die that it lets you enter text, similarly to Notepad.exe, but without the excellent support of user32.dll and gdi32.dll, just plain text and 80x25 only (or whatever your computer happens to boot up at and draws from memory location 0xb8000). I also wrote it for the fun of doing stuff in assembly and learning more about my computer and its architecture. I learned a lot from OSDev.org's wiki and Ralph Brown's Interrupt List. At various points I thought I was going to use an E820 memory map to find a large segment of unused memory and enumerate the PCI bus to identify a USB hub and write a USB driver to interact with the USB key, but that was a lot of work so I stuck with int13 and rely on BIOS USB hard drive emulation. (I was able to generate an e820 memory map and enumerate the PCI bus, by the way!) I would like to add FAT support next to increase the usability and appeal to a wider audience and to get along with other uses for flash drives. It doesn't make sense to have a 8GB key of a single linear document. Maybe this would be a nice journal. Right now I am just trying to get it to fill a buffer and write to the next sector on the drive so you can recover your writing with dd.
